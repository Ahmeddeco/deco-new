generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./generated"
  useMultipleFiles                 = true
  writeNullishInModelTypes         = true
  createModelTypes                 = true // default is true
  writeBarrelFiles                 = false // default is true
  createInputTypes                 = false // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = false // default is true
  coerceDate                       = false // default is true
}

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Style {
  minimalist
  contemporary
  japandy
  scandinavian
  glam
  industrial
  rustic
  traditional
}

model Project {
  id String @id @default(cuid())

  title       String ///@zod.string.min(3).max(60)
  city        String ///@zod.string.max(60)
  country     String ///@zod.string.max(60)
  description String ///@zod.string.min(60).max(255)
  image       String[]
  style       Style
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client   Client @relation(fields: [clientId], references: [id])
  clientId String
}

model Client {
  id          String   @id @default(cuid())
  firstName   String ///@zod.string.min(3).max(60)
  lastName    String? ///@zod.string.min(3).max(60)
  description String? ///@zod.string.min(60).max(255)
  phone       String   @unique ///@zod.string.min(7).max(14)
  email       String   @unique ///@zod.string.email()
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Project Project[]
}

model Admin {
  id          String   @id @default(cuid())
  firstName   String ///@zod.string.min(3).max(60)
  lastName    String? ///@zod.string.min(3).max(60)
  description String? ///@zod.string.min(60).max(255)
  phone       String   @unique ///@zod.string.min(7).max(14)
  email       String   @unique ///@zod.string.email()
  role        Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  admin
  superAdmin
}

model Article {
  id            String     @id @default(cuid())
  title         String ///@zod.string.min(3).max(60)
  mainParagraph String ///@zod.string.min(60).max(1000)
  image         String     @unique ///@zod.string.url()
  subtitles     Subtitle[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Subtitle {
  id        String @id @default(cuid())
  title     String ///@zod.string.min(3).max(60)
  paragraph String ///@zod.string.min(60).max(500)
  image     String @unique ///@zod.string.url()

  Article   Article @relation(fields: [articleId], references: [id])
  articleId String
}
